---
title: EMA Analyses
author: Kendra Wyant
editor_options: 
  chunk_output_type: console
---

```{r}
#|echo: FALSE

# handle conflicts
options(conflicts.policy = "depends.ok")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
tidymodels_conflictRules()

library(tidyverse)
library(tidymodels)
library(tidyposterior)
theme_set(theme_classic())

devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true")
```


```{r}
#| echo: FALSE 
#| output: False

path_processed <- format_path("studydata/risk/data_processed/ema")
path_models <- format_path("studydata/risk/models/ema")
path_shared <- format_path("studydata/risk/data_processed/shared")

auc_week <- read_rds(file.path(path_models, "outer_metrics_1week_0_v5_nested_main.rds")) |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)

auc_day <- read_rds(file.path(path_models, "outer_metrics_1day_0_v5_nested_main.rds")) |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)

auc_hour <- read_rds(file.path(path_models, "outer_metrics_1hour_0_v5_nested_main.rds")) |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)


auc <- auc_week |> 
  rename(week = roc_auc) |> 
  mutate(day = auc_day$roc_auc,
         hour = auc_hour$roc_auc) 

auc_week_baseline <- read_rds(file.path(path_models, "outer_metrics_1week_0_v3_nested_baseline.rds")) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)

auc_day_baseline <- read_rds(file.path(path_models, "outer_metrics_1day_0_v3_nested_baseline.rds")) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)

auc_hour_baseline <- read_rds(file.path(path_models, "outer_metrics_1hour_0_v3_nested_baseline.rds")) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(repeat_num, fold_num, roc_auc)

auc_baseline <- auc_week_baseline |> 
  rename(week_baseline = roc_auc) |> 
  mutate(day_baseline = auc_day_baseline$roc_auc,
         hour_baseline = auc_hour_baseline$roc_auc) |> 
  full_join(auc, by = c("repeat_num", "fold_num"))
```

### Confusion matrix

Predictions
```{r}
preds_day <- read_rds(file.path(path_models, "outer_preds_1day_0_v5_nested_main.rds")) |> 
  group_by(id_obs, label) |> 
  summarize(probability = mean(prob_beta), .groups = "drop") 

preds_week <- read_rds(file.path(path_models, "outer_preds_1week_0_v5_nested_main.rds")) |> 
  group_by(id_obs, label) |> 
  summarize(probability = mean(prob_beta), .groups = "drop") 

preds_hour <- read_rds(file.path(path_models, "outer_preds_1hour_0_v5_nested_main.rds")) |> 
  group_by(id_obs, label) |> 
  summarize(probability = mean(prob_beta), .groups = "drop") 
```

```{r}

roc_week_full <- preds_week |> 
  roc_curve(probability, truth = label)

roc_day_full <- preds_day |> 
  roc_curve(probability, truth = label)

roc_hour_full <- preds_hour |> 
  roc_curve(probability, truth = label)

j_thres_week <- roc_week_full |> 
  mutate(j = sensitivity + specificity - 1) |> 
  slice_max(j) |> 
#  print() |> 
  pull(.threshold)

j_thres_day <- roc_day_full |> 
  mutate(j = sensitivity + specificity - 1) |> 
  slice_max(j) |> 
#  print() |> 
  pull(.threshold)

j_thres_hour <- roc_hour_full |> 
  mutate(j = sensitivity + specificity - 1) |> 
  slice_max(j) |> 
#  print() |> 
  pull(.threshold)
```

```{r}
preds_day <- preds_day |> 
  mutate(estimate = if_else(probability > j_thres_day, "Lapse", "No lapse"),
         estimate = factor(estimate, levels = c("Lapse", "No lapse")))

cm <- tibble(truth = preds_day$label,
             estimate = preds_day$estimate) |> 
  conf_mat(truth, estimate)

cm
```

### Jitter plot

```{r}

day <- preds_day |> 
  mutate(window = "day",
         window = factor(window)) |> 
  ggplot(aes(group = window)) +
  geom_jitter(aes(x = probability, y = window, color = label), alpha = .4) +
  geom_vline(xintercept = j_thres_day, linetype = "dashed") +
  scale_color_manual(values = c("#6C3483", "grey")) + 
  theme(legend.position = "bottom",
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        legend.title = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.background = element_rect(fill='transparent'), 
        plot.background = element_rect(fill='transparent', color=NA))

day 

# ggsave('day_pred.png', day, bg='transparent', width = 8, height = 4)
```



```{r}
#| echo: false
#| output: false

set.seed(101)
pp <- auc |> 
  rename(id = repeat_num,
         id2 = fold_num) |> 
  perf_mod(formula = statistic ~ model + (1 | id2/id),
           transform = tidyposterior::logit_trans,  
           iter = 2000, chains = 4,  
           adapt_delta = .99,
           family = gaussian) 

pp_tidy <- pp |> 
  tidy(seed = 123)

q = c(.025, .5, .975)
ci <- pp_tidy |> 
  group_by(model) |> 
  summarize(pp_median = quantile(posterior, probs = q[2]),
            pp_lower = quantile(posterior, probs = q[1]), 
            pp_upper = quantile(posterior, probs = q[3])) |> 
  mutate(model = factor(model, levels = c("week", "day", "hour"),
                        labels = c("Week", "Day", "Hour")),
         y = 700) |> 
  arrange(model)
```

### Posteriors

```{r}
#| label: fig-ema-posteriors
#| fig-cap: "Caption"

pp_tidy |> 
  mutate(model = factor(model, levels = c("week", "day", "hour"),
         labels = c("Week", "Day", "Hour"))) |>
  ggplot() + 
  geom_histogram(aes(x = posterior, fill = model, color = model), 
                 bins = 40) +
  geom_segment(mapping = aes(y = y+100, yend = y-100, x = pp_median, xend = pp_median),
               data = ci) +
  geom_segment(mapping = aes(y = y, yend = y, x = pp_lower, xend = pp_upper),
                data = ci) +
  facet_wrap(~model, ncol = 1) +
  scale_color_manual(values = c("#4A235A", "#D4AC0D", "#0B5345")) +
  scale_fill_manual(values = c("#D7BDE2", "#F9E79F", "#A2D9CE")) +
  scale_y_continuous("Posterior Probability", breaks = c(0, 500, 1000)) +
  # ylab("Posterior Probability Density") +
  xlab("Area Under ROC Curve")  +
  theme(legend.position = "none")
  # geom_text(aes(c("Median = 0.90", "Median = 0.91", "Median = .93")))
```





### Shapley

```{r}
shap_local_week <- read_rds(file.path(path_models, "outer_shapsgrp_1week_0_v5_nested_main.rds")) |>
    mutate(variable_grp = case_when(variable_grp == "lapse hour (other)" ~ "time of day (other)",
                                  variable_grp == "lapse day (other)" ~ "day of week (other)",
                                  TRUE ~ variable_grp))
shap_local_day <- read_rds(file.path(path_models, "outer_shapsgrp_1day_0_v5_nested_main.rds")) |>
    mutate(variable_grp = case_when(variable_grp == "lapse hour (other)" ~ "time of day (other)",
                                  variable_grp == "lapse day (other)" ~ "day of week (other)",
                                  TRUE ~ variable_grp))
shap_local_hour <- read_rds(file.path(path_models, "outer_shapsgrp_1hour_0_v5_nested_main.rds")) |>
    mutate(variable_grp = case_when(variable_grp == "lapse hour (other)" ~ "time of day (other)",
                                  variable_grp == "lapse day (other)" ~ "day of week (other)",
                                  TRUE ~ variable_grp))

shap_global_week <- shap_local_week |>
  group_by(variable_grp) |>
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |>
  mutate(model = "Week")
shap_global_day <- shap_local_day |>
  group_by(variable_grp) |>
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |>
  mutate(model = "Day")
shap_global_hour <- shap_local_hour |>
  group_by(variable_grp) |>
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |>
  mutate(model = "Hour")
shap_global_all <- shap_global_week |>
  bind_rows(shap_global_day) |>
  bind_rows(shap_global_hour) |>
  mutate(model = factor(model, levels = c("Week", "Day", "Hour"))) |>
  mutate(variable_grp = factor(variable_grp, levels = c("past use (EMA item)",
                                          "craving (EMA item)",
                                          "past risky situation (EMA item)",
                                          "past stressful event (EMA item)",
                                          "past pleasant event (EMA item)",
                                          "valence (EMA item)",
                                          "arousal (EMA item)",
                                          "future risky situation (EMA item)",
                                          "future stressful event (EMA item)",
                                          "future efficacy (EMA item)",
                                          "day of week (other)",
                                          "time of day (other)",
                                          "missing surveys (other)",
                                          "age (demographic)",
                                          "sex (demographic)",
                                          "race (demographic)",
                                          "marital (demographic)",
                                          "education (demographic)")))
```

```{r}
shap_global_all |>
  mutate(variable_grp = reorder(variable_grp, mean_value, sum)) |>
  ggplot() +
  geom_bar(aes(x = variable_grp, y = mean_value, fill = model, color = model), stat = "identity") +
  ylab("Mean(|Shapley Value|)") +
  xlab("") +
  scale_color_manual(values = c("#4A235A", "#D4AC0D", "#0B5345")) +
  scale_fill_manual(values = c("#D7BDE2", "#F9E79F", "#A2D9CE")) +
  theme(axis.text = element_text(size = 9.5)) +
  coord_flip()
```

```{r}
# order features to match global plot
shap_levels <- shap_global_all |>
  mutate(variable_grp = reorder(variable_grp, mean_value, sum)) |>
  pull(variable_grp) |>
  levels()

# downsample to 10% of observations for each plot
downsample_ratio <- .10
ids_week <- shap_local_week |>
  pull(id_obs) |>
  unique()
ids_week <- ids_week |> sample(size = round(length(ids_week)/(1/downsample_ratio)))
ids_day <- shap_local_day |>
  pull(id_obs) |>
  unique()
ids_day <- ids_day |> sample(size = round(length(ids_day)/(1/downsample_ratio)))
ids_hour <- shap_local_hour |>
  pull(id_obs) |>
  unique()
ids_hour <- ids_hour |> sample(size = round(length(ids_hour)/(1/downsample_ratio)))

# week panel
panel_shap_local_week <- shap_local_week |>
  filter(id_obs %in% ids_week) |>
  mutate(variable_grp = factor(variable_grp, levels = shap_levels),
         pred_width = factor("Week")) |>
  ggplot(mapping = aes(x = variable_grp, y = value)) +
  ggforce::geom_sina(method = "counts", maxwidth = 0.7,alpha = .4,
                     color = "#4A235A") +
  geom_hline(yintercept = 0) +
  facet_wrap(~pred_width) +
  scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
  ylab("Shapley Value") +
  xlab("") +
  theme(axis.text = element_text(size = 9.5)) +
  coord_flip()

# day panel
panel_shap_local_day <- shap_local_day |>
  filter(id_obs %in% ids_day) |>
  mutate(variable_grp = factor(variable_grp, levels = shap_levels),
         pred_width = factor("Day")) |>
  ggplot(mapping = aes(x = variable_grp, y = value)) +
  ggforce::geom_sina(method = "counts", maxwidth = 0.7, alpha = 0.4,
                     color = "#D4AC0D") +
  geom_hline(yintercept = 0) +
  facet_wrap(~pred_width) +
  scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
  ylab("Shapley Value") +
  xlab("") +
  theme(axis.text.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +
  coord_flip()

# hour panel
panel_shap_local_hour <- shap_local_hour |>
  filter(id_obs %in% ids_hour) |>
  mutate(variable_grp = factor(variable_grp, levels = shap_levels),
         pred_width = factor("Hour")) |>
  ggplot(mapping = aes(x = variable_grp, y = value)) +
  ggforce::geom_sina(method = "counts", maxwidth = 0.7, alpha = 0.4,
                     color = "#0B5345") +
  geom_hline(yintercept = 0) +
  facet_wrap(~pred_width) +
  scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +
  ylab("Shapley Value") +
  xlab("") +
   theme(axis.text.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +
  coord_flip()
```

```{r}
panel_shap_local_week + panel_shap_local_day + panel_shap_local_hour +
  plot_layout (ncol = 3, width = c(1.2,1, 1))
```





